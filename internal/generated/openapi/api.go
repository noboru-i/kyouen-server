// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * 共円パズルゲーム API
 *
 * 共円パズルゲーム用REST APIサーバーです。  共円は、グリッド上に石を配置して、ちょうど4つの石で円や直線を形成する 知的パズルゲームです。このAPIは、ステージ管理、ユーザー認証、 ゲーム進行の追跡機能を提供します。  **アーキテクチャ:** - プラットフォーム: Cloud Run + DatastoreモードFirestore - フレームワーク: Gin (Go) - 認証: Twitter OAuth + Firebase  **ゲームルール:** - グリッド上に石を配置 - ちょうど4つの石で共円（円または直線）を形成 - パズル設定を解いてステージをクリア 
 *
 * API version: 2.0.0
 */

package openapi

import (
	"context"
	"net/http"
)



// AuthenticationAPIRouter defines the required methods for binding the api requests to a responses for the AuthenticationAPI
// The AuthenticationAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AuthenticationAPIServicer to perform the required actions, then write the service results to the http response.
type AuthenticationAPIRouter interface { 
	UsersLoginPost(http.ResponseWriter, *http.Request)
}
// StagesAPIRouter defines the required methods for binding the api requests to a responses for the StagesAPI
// The StagesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a StagesAPIServicer to perform the required actions, then write the service results to the http response.
type StagesAPIRouter interface { 
	StagesGet(http.ResponseWriter, *http.Request)
	StagesPost(http.ResponseWriter, *http.Request)
	StagesStageNoClearPut(http.ResponseWriter, *http.Request)
	StagesSyncPost(http.ResponseWriter, *http.Request)
}
// StatisticsAPIRouter defines the required methods for binding the api requests to a responses for the StatisticsAPI
// The StatisticsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a StatisticsAPIServicer to perform the required actions, then write the service results to the http response.
type StatisticsAPIRouter interface { 
	StaticsGet(http.ResponseWriter, *http.Request)
}
// SystemAPIRouter defines the required methods for binding the api requests to a responses for the SystemAPI
// The SystemAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SystemAPIServicer to perform the required actions, then write the service results to the http response.
type SystemAPIRouter interface { 
	HealthGet(http.ResponseWriter, *http.Request)
}


// AuthenticationAPIServicer defines the api actions for the AuthenticationAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AuthenticationAPIServicer interface { 
	UsersLoginPost(context.Context, LoginParam) (ImplResponse, error)
}


// StagesAPIServicer defines the api actions for the StagesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type StagesAPIServicer interface { 
	StagesGet(context.Context, int64, int64) (ImplResponse, error)
	StagesPost(context.Context, NewStage) (ImplResponse, error)
	StagesStageNoClearPut(context.Context, int64, ClearStage) (ImplResponse, error)
	StagesSyncPost(context.Context, []ClearedStage) (ImplResponse, error)
}


// StatisticsAPIServicer defines the api actions for the StatisticsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type StatisticsAPIServicer interface { 
	StaticsGet(context.Context) (ImplResponse, error)
}


// SystemAPIServicer defines the api actions for the SystemAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SystemAPIServicer interface { 
	HealthGet(context.Context) (ImplResponse, error)
}
